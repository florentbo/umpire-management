/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './presentation/routes/__root'
import { Route as LoginRouteImport } from './presentation/routes/login'
import { Route as IndexRouteImport } from './presentation/routes/index'
import { Route as UmpireDashboardRouteImport } from './presentation/routes/umpire/dashboard'
import { Route as ManagerAvailabilityRouteImport } from './presentation/routes/manager/availability'
import { Route as ManagerReportingIndexRouteImport } from './presentation/routes/manager/reporting/index'
import { Route as ManagerDashboardIndexRouteImport } from './presentation/routes/manager/dashboard/index'
import { Route as ManagerAssessmentMatchIdRouteImport } from './presentation/routes/manager/assessment.$matchId'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UmpireDashboardRoute = UmpireDashboardRouteImport.update({
  id: '/umpire/dashboard',
  path: '/umpire/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerAvailabilityRoute = ManagerAvailabilityRouteImport.update({
  id: '/manager/availability',
  path: '/manager/availability',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerReportingIndexRoute = ManagerReportingIndexRouteImport.update({
  id: '/manager/reporting/',
  path: '/manager/reporting/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerDashboardIndexRoute = ManagerDashboardIndexRouteImport.update({
  id: '/manager/dashboard/',
  path: '/manager/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const ManagerAssessmentMatchIdRoute =
  ManagerAssessmentMatchIdRouteImport.update({
    id: '/manager/assessment/$matchId',
    path: '/manager/assessment/$matchId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/manager/availability': typeof ManagerAvailabilityRoute
  '/umpire/dashboard': typeof UmpireDashboardRoute
  '/manager/assessment/$matchId': typeof ManagerAssessmentMatchIdRoute
  '/manager/dashboard': typeof ManagerDashboardIndexRoute
  '/manager/reporting': typeof ManagerReportingIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/manager/availability': typeof ManagerAvailabilityRoute
  '/umpire/dashboard': typeof UmpireDashboardRoute
  '/manager/assessment/$matchId': typeof ManagerAssessmentMatchIdRoute
  '/manager/dashboard': typeof ManagerDashboardIndexRoute
  '/manager/reporting': typeof ManagerReportingIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/manager/availability': typeof ManagerAvailabilityRoute
  '/umpire/dashboard': typeof UmpireDashboardRoute
  '/manager/assessment/$matchId': typeof ManagerAssessmentMatchIdRoute
  '/manager/dashboard/': typeof ManagerDashboardIndexRoute
  '/manager/reporting/': typeof ManagerReportingIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/manager/availability'
    | '/umpire/dashboard'
    | '/manager/assessment/$matchId'
    | '/manager/dashboard'
    | '/manager/reporting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/manager/availability'
    | '/umpire/dashboard'
    | '/manager/assessment/$matchId'
    | '/manager/dashboard'
    | '/manager/reporting'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/manager/availability'
    | '/umpire/dashboard'
    | '/manager/assessment/$matchId'
    | '/manager/dashboard/'
    | '/manager/reporting/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ManagerAvailabilityRoute: typeof ManagerAvailabilityRoute
  UmpireDashboardRoute: typeof UmpireDashboardRoute
  ManagerAssessmentMatchIdRoute: typeof ManagerAssessmentMatchIdRoute
  ManagerDashboardIndexRoute: typeof ManagerDashboardIndexRoute
  ManagerReportingIndexRoute: typeof ManagerReportingIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/umpire/dashboard': {
      id: '/umpire/dashboard'
      path: '/umpire/dashboard'
      fullPath: '/umpire/dashboard'
      preLoaderRoute: typeof UmpireDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/availability': {
      id: '/manager/availability'
      path: '/manager/availability'
      fullPath: '/manager/availability'
      preLoaderRoute: typeof ManagerAvailabilityRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/reporting/': {
      id: '/manager/reporting/'
      path: '/manager/reporting'
      fullPath: '/manager/reporting'
      preLoaderRoute: typeof ManagerReportingIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/dashboard/': {
      id: '/manager/dashboard/'
      path: '/manager/dashboard'
      fullPath: '/manager/dashboard'
      preLoaderRoute: typeof ManagerDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/manager/assessment/$matchId': {
      id: '/manager/assessment/$matchId'
      path: '/manager/assessment/$matchId'
      fullPath: '/manager/assessment/$matchId'
      preLoaderRoute: typeof ManagerAssessmentMatchIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ManagerAvailabilityRoute: ManagerAvailabilityRoute,
  UmpireDashboardRoute: UmpireDashboardRoute,
  ManagerAssessmentMatchIdRoute: ManagerAssessmentMatchIdRoute,
  ManagerDashboardIndexRoute: ManagerDashboardIndexRoute,
  ManagerReportingIndexRoute: ManagerReportingIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
