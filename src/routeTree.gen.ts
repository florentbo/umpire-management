/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UmpireDashboardImport } from './routes/umpire/dashboard'
import { Route as ManagerReportingImport } from './routes/manager/reporting'
import { Route as ManagerAvailabilityImport } from './routes/manager/availability'
import { Route as ManagerAssessmentMatchIdImport } from './routes/manager/assessment.$matchId'
import { Route as ManagerDashboardImport } from './routes/manager/dashboard'
import { Route as LoginImport } from './routes/login'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const UmpireDashboardRoute = UmpireDashboardImport.update({
  path: '/umpire/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const ManagerReportingRoute = ManagerReportingImport.update({
  path: '/manager/reporting',
  getParentRoute: () => rootRoute,
} as any)

const ManagerAvailabilityRoute = ManagerAvailabilityImport.update({
  path: '/manager/availability',
  getParentRoute: () => rootRoute,
} as any)

const ManagerAssessmentMatchIdRoute = ManagerAssessmentMatchIdImport.update({
  path: '/manager/assessment/$matchId',
  getParentRoute: () => rootRoute,
} as any)

const ManagerDashboardRoute = ManagerDashboardImport.update({
  path: '/manager/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/manager/dashboard': {
      id: '/manager/dashboard'
      path: '/manager/dashboard'
      fullPath: '/manager/dashboard'
      preLoaderRoute: typeof ManagerDashboardImport
      parentRoute: typeof rootRoute
    }
    '/manager/reporting': {
      id: '/manager/reporting'
      path: '/manager/reporting'
      fullPath: '/manager/reporting'
      preLoaderRoute: typeof ManagerReportingImport
      parentRoute: typeof rootRoute
    }
    '/manager/availability': {
      id: '/manager/availability'
      path: '/manager/availability'
      fullPath: '/manager/availability'
      preLoaderRoute: typeof ManagerAvailabilityImport
      parentRoute: typeof rootRoute
    }
    '/manager/assessment/$matchId': {
      id: '/manager/assessment/$matchId'
      path: '/manager/assessment/$matchId'
      fullPath: '/manager/assessment/$matchId'
      preLoaderRoute: typeof ManagerAssessmentMatchIdImport
      parentRoute: typeof rootRoute
    }
    '/umpire/dashboard': {
      id: '/umpire/dashboard'
      path: '/umpire/dashboard'
      fullPath: '/umpire/dashboard'
      preLoaderRoute: typeof UmpireDashboardImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexRoute,
  LoginRoute,
  ManagerDashboardRoute,
  ManagerReportingRoute,
  ManagerAvailabilityRoute,
  ManagerAssessmentMatchIdRoute,
  UmpireDashboardRoute,
})

/* prettier-ignore-end */